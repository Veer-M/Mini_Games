while True:
  print("")
  print ("Select a game from these options:")
  print("")
  print ("- BlackJack")
  print ("- Hangman")
  print ("- Tic-Tac-Toe")
  print ("- Pac-Man")
  print("")
  Game_input = ("")
  Game_input = str(input("Enter the game name: "))
  if Game_input == ("Blackjack") or Game_input == ("blackjack") or Game_input == ("BlackJack"):
    print("")
    import random
    draw_number=0
    player=0
    gamemode=("")
    number_list=(1,2,3,4,5,6,7,8,9,10,10,10,10)
    while True:
      gamemode = input("Easy, Medium, or Hard? ")
      if gamemode==("Easy"):
        number_list2=(16,16,17,18)
        break
      if gamemode==("Medium"):
        number_list2=(17,18,19,20)
        break
      if gamemode==("Hard"):
        number_list2=(18,19,20,21)
        break
      if gamemode==("easy"):
        number_list2=(16,16,17,18)
        break
      if gamemode==("medium"):
        number_list2=(17,18,19,20)
        break
      if gamemode==("hard"):
        number_list2=(18,19,20,21)
        break
      if gamemode==("Code_bypass"):
        print("")
        print("I'm afraid, you have spawned the blackjack champion")
        number_list2=(20,21,21,21)
        break
      else:
          print("")
          print("Please enter gamemode")
          print("")
    player=player+random.choice(number_list)
    print("")
    print("Your first number is: " + str(player))
    print("")
    hold = ("stand")
    hit = ("hit")
    Bot = random.choice(number_list2)
    while True:
      draw_hold = input("hit or stand? ")
      print("")
      pick = (draw_hold)
      if (pick == "stand"):
        if Bot < (player):
          print("You Won, you got:",(player), "Jonathan got:",(Bot))
          break
        if Bot > (player):
            print("You Lost, you got:",(player), "Jonathan got:",(Bot))
            break
        if Bot == (player):
                print("Tied, you both got"+ str(Bot) +"LOLOLOL")
      if (pick == "hit"):
        player = (player+random.choice(number_list))
        print(player+draw_number)
        print("")
        if player >= 22:
          print ("YOU LOST LLLL, you got over 21")
          break
  if Game_input == ("Hangman") or Game_input == ("HangMan") or Game_input == ("hangman"):
    print("")
    import random
    import time
    joe=0
    name = input("What is your name? ")
    if name==("Hacker"):
        print("")
        print("Error. please wait... We are trying to configure the problem")
        time.sleep(2)
        while True:
          print("ERROR SYSTEM OVERIDE. A VIRUS HAS ENTERED THE PROGRAM. DOWNLOADING VIRUS2XE.EXE. >>>PROCESS LOADING ERR0R PROGRAM (Computer Johnathan has been granted access to your device) TRYING TO CONFIGURE. LOADING... A VIRUS HAS ENTERED YOUR COMPUTER. REPLIT.COM IS NOT A SAFE WEBSITE. A SYSTEM ERROR HAS BEEN DETECTED PLEASE RESET THE DEVICE IMMEDIATELY. TRYING TO CONFIGURE>>>")
    print("")
    print ("Sup " + name + ", welcome to Python hangman")
    print ("")
    time.sleep(1)
    print ("Guess:")
    print("")
    time.sleep(0.5)
    word=("flabbergasted","consequent","constitution","president","watch","cheese","canteloupe","confusion","cabbage","boorish","applewatch","computer","graphics","catastrophic")
    word=random.choice(word)
    guesses = ''
    turns = round((len(word))*1.7)
    failed = 0
    number_of_tries=0           
    while turns > 0:
      failed=0
      if joe ==(len(word)):
        for char in word:
          if char in guesses:
            print (char)
        print("You Won!!!")
        quit()
      else:           
        for char in word:
            if char in guesses:
                print (char)
            else:
                print ("_")
                failed += 1
        if failed==0:
          print("")
          print("You Won!!!")
          print("")
          print("It took you "+ str(number_of_tries)+" tries to get this " + str(len(word)) + " letter word")
          break
        print("")
        guess = input("guess a character: ")
        guesses+=guess
        number_of_tries+=1            
        if guess not in (word):  
            turns -= 1
            print("")
            print ("Wrong")
            print("")
            print ("You have", + turns, "more guesses") 
            print("")
            if turns == 0:
                print ("You Lose, you ran out of tries :(")
  if Game_input == ("Tic-Tac-Toe") or Game_input == ("tic-tac-toe") or Game_input == ("Tic-tac-toe"):
    print("")
    print("This is the numerical value for each section:")
    print("")
    print('1' + ' |' + ' 2 ' + '| ' + '3')
    print('--+---+--')
    print('4' + ' |' + ' 5 ' + '| ' + '6')
    print('--+---+--')
    print('7' + ' |' + ' 8 ' + '| ' + '9')
    print("________________________")
    theBoard = {'7': ' ' , '8': ' ' , '9': ' ' ,
                '4': ' ' , '5': ' ' , '6': ' ' ,
                '1': ' ' , '2': ' ' , '3': ' ' }
    board_keys = []
    for key in theBoard:
        board_keys.append(key)
    print("")
    def printBoard(board):
        print(board['1'] + ' |' + board['2'] + '  |' + board['3'])
        print('--+---+--')
        print(board['4'] + ' |' + board['5'] + '  |' + board['6'])
        print('--+---+--')
        print(board['7'] + ' |' + board['8'] + '  |' + board['9'])
    def game():
        turn = 'X'
        count = 0
        for i in range(10):
            printBoard(theBoard)
            print("")
            print("It's " + turn + "'s turn. Move to which place?")
            print("")
            move = input()
            print("")     
            if theBoard[move] == ' ':
                theBoard[move] = turn
                count += 1
            else:
                print("That place is already filled.\nMove to which place?")
                continue
            if count >= 5:
                if theBoard['7'] == theBoard['8'] == theBoard['9'] != ' ':
                    printBoard(theBoard)
                    print("\nGame Over.\n")                
                    print(turn + " won")                
                    break
                elif theBoard['4'] == theBoard['5'] == theBoard['6'] != ' ': 

                    printBoard(theBoard)
                    print("\nGame Over.\n")                
                    print(turn + " won")
                    break
                elif theBoard['1'] == theBoard['2'] == theBoard['3'] != ' ':
                    printBoard(theBoard)
                    print("\nGame Over.\n")                
                    print(turn + " won")
                    break
                elif theBoard['1'] == theBoard['4'] == theBoard['7'] != ' ': 

                    printBoard(theBoard)
                    print("\nGame Over.\n")                
                    print(turn + " won")
                    break
                elif theBoard['2'] == theBoard['5'] == theBoard['8'] != ' ':
                    printBoard(theBoard)
                    print("\nGame Over.\n")                
                    print(turn + " won")
                    break
                elif theBoard['3'] == theBoard['6'] == theBoard['9'] != ' ': # 

                    printBoard(theBoard)
                    print("\nGame Over.\n")                
                    print(turn + " won")
                    break 
                elif theBoard['7'] == theBoard['5'] == theBoard['3'] != ' ': 
                    printBoard(theBoard)
                    print("\nGame Over.\n")                
                    print(turn + " won")
                    break
                elif theBoard['1'] == theBoard['5'] == theBoard['9'] != ' ': 
                    printBoard(theBoard)
                    print("\nGame Over.\n")                
                    print(turn + " won")
                    break 
            
            if turn =='X':
                turn = 'O'
            else:
                turn = 'X'
        if count==9:
          print("\nGame Over.\n")                
          print("It's a Tie!!")   
          print("")
    game()
    restart = input("\nDo want to play Again(yes/no)? \n")
    if restart == "yes" or restart == "Yes":  
      for key in board_keys:
        theBoard[key] = " "
        game()
  if Game_input == ("Pac-Man") or Game_input == ("PacMan") or Game_input == ("pac-man") or Game_input == ("Pac-man"):
    from random import choice
    from turtle import *
    
    from freegames import floor, vector
    
    state = {'score': 0}
    path = Turtle(visible=False)
    writer = Turtle(visible=False)
    aim = vector(5, 0)
    pacman = vector(-40, -80)
    ghosts = [
        [vector(-180, 160), vector(5, 0)],
        [vector(-180, -160), vector(0, 5)],
        [vector(100, 160), vector(0, -5)],
        [vector(100, -160), vector(-5, 0)],
    ]
    # fmt: off
    tiles = [
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
        0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0,
        0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
        0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0,
        0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0,
        0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 1, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0,
        0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
        0, 0, 0, 0, 1, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0,
        0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0, 0, 0,
        0, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
        0, 1, 0, 0, 1, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
        0, 1, 1, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1, 1, 0, 0, 0, 0,
        0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0, 0,
        0, 1, 1, 1, 1, 0, 1, 1, 0, 1, 1, 0, 1, 1, 1, 1, 0, 0, 0, 0,
        0, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
        0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    ]
    # fmt: on
    
    
    def square(x, y):
        """Draw square using path at (x, y)."""
        path.up()
        path.goto(x, y)
        path.down()
        path.begin_fill()
    
        for count in range(4):
            path.forward(20)
            path.left(90)
    
        path.end_fill()
    
    
    def offset(point):
        """Return offset of point in tiles."""
        x = (floor(point.x, 20) + 200) / 20
        y = (180 - floor(point.y, 20)) / 20
        index = int(x + y * 20)
        return index
    
    
    def valid(point):
        """Return True if point is valid in tiles."""
        index = offset(point)
    
        if tiles[index] == 0:
            return False
    
        index = offset(point + 19)
    
        if tiles[index] == 0:
            return False
    
        return point.x % 20 == 0 or point.y % 20 == 0
    
    
    def world():
        """Draw world using path."""
        bgcolor('black')
        path.color('blue')
    
        for index in range(len(tiles)):
            tile = tiles[index]
    
            if tile > 0:
                x = (index % 20) * 20 - 200
                y = 180 - (index // 20) * 20
                square(x, y)
    
                if tile == 1:
                    path.up()
                    path.goto(x + 10, y + 10)
                    path.dot(2, 'white')
    
    
    def move():
        """Move pacman and all ghosts."""
        writer.undo()
        writer.write(state['score'])
    
        clear()
    
        if valid(pacman + aim):
            pacman.move(aim)
    
        index = offset(pacman)
    
        if tiles[index] == 1:
            tiles[index] = 2
            state['score'] += 1
            x = (index % 20) * 20 - 200
            y = 180 - (index // 20) * 20
            square(x, y)
    
        up()
        goto(pacman.x + 10, pacman.y + 10)
        dot(20, 'yellow')
    
        for point, course in ghosts:
            if valid(point + course):
                point.move(course)
            else:
                options = [
                    vector(5, 0),
                    vector(-5, 0),
                    vector(0, 5),
                    vector(0, -5),
                ]
                plan = choice(options)
                course.x = plan.x
                course.y = plan.y
    
            up()
            goto(point.x + 10, point.y + 10)
            dot(20, 'red')
    
        update()
    
        for point, course in ghosts:
            if abs(pacman - point) < 20:
                return
    
        ontimer(move, 100)
    
    
    def change(x, y):
        """Change pacman aim if valid."""
        if valid(pacman + vector(x, y)):
            aim.x = x
            aim.y = y
    
    
    setup(420, 420, 370, 0)
    hideturtle()
    tracer(False)
    writer.goto(160, 160)
    writer.color('white')
    writer.write(state['score'])
    listen()
    onkey(lambda: change(5, 0), 'Right')
    onkey(lambda: change(-5, 0), 'Left')
    onkey(lambda: change(0, 5), 'Up')
    onkey(lambda: change(0, -5), 'Down')
    world()
    move()
    done()
